# Book orgainising bot - Bob v2.0
#
# Bot ma:
# 1. Dodać książkę.
# 2. Dodać ocenę (od 1 do 10).
# 3. Oznaczyć jako przeczytaną.
# 4. Wypisac posiadane książki.
# 5. Filtrować.
# 6. Zapamiętac wprowadzone dane.

class Book:
    def _init_(self, title, authors, rating, read): #init funkcja inicjalizująca obiekt, self odnosnik do tworzonego obiektu
     self.title = title
     self.authors = authors
     self.set_rating(rating)
     self.read = read

def set_rating(self, value):
    if value >= 1.0 and value <= 10.0:
        self.rating = value 

def set_read(self, value):
    if value == "Tak":
        self.read = True
    else:
        self.read = False

class BookBot:
    def_init_(self):
       self.shelve = []


#---------Add---------
def add_book(self, title, authors, rating, read):
    b = Book(self, title, authors, rating, read)
    self.shelve.append(b)



def add_book_from_input(self):
    title = input("Tytuł: ")
    author = input("Autor: ")
    rating = float("Ocena: ")
    read = input("Przeczytana?: ")
    if read == "Tak"
        read = True
    else:
        read = False

    self.add_book(title, authors, rating, read)

#................PRINT...................    

def print_book(self, index):
    book = self.shelve[index]
    print("{:4} | {:30} | {:30} | {:5} | {:5}".format(index, book.title, book.authors, book.rating, book.read))

 def print_all_books(self):
   for index in range(len(self.shelve)):
        self.print_book(index)

def print_all_read_books(self):
    for i in range(len(self.shelve)):
        book = self.shelve[i]
        if book.read:
            self.print_book(i)

def print_all_rting_books(self, min_rating, max_rating):
    for i in range(len(self.shelve)):
        book = self.shelve[i]
        if min_rating <= book.rating <= max_rating:
            self.print_book(i)

#.......SET............
def set_book_rating(self, book_index, rating):
    book = self.shelve[book_index]
    book.set_rating(rating)

def set_book_read(self,book_index, read):
    book = self.shelve[book_index]
    book.set_read(read)

def save_books(self):
    text_books = []

    for i in range(len(self.shelve)):
        book = self.shelve[i]
        text = "{};{};{};{}".format(book.title, book.authors, book.rating, book.read)
        text_books.append(text)

    with open('books.csv', 'w') as f:
        for line in text_books:
            f.write(line + '\n')

   # print(text_books)


    
def load_books(self):
    with open('books.csv', 'r') as f:
        for line in f:
           # print(line)
           book_list = line.split(';')
           print(book_list)

           if book_list[3] == 'True\n':
               read = True
           else:
               read = False

        self.add_book(book_list[0], book_list[1], float(book_list[2]), book_list[3])


bot = BookBot()



while True:
    command = input("Co mam zrobić?")

    if command == "dodaj":
        bot.add_book_from_input()
    elif command == "wszystkie":
        bot.print_all_books()
    elif command == "oceń":
        index = int(input("Index: "))
        rating = float(input("Ocena: "))
        bot.set_book_rating(index, rating)        
    elif command == "przeczytałam":
        index = int(input("Indeks: "))
        bot.set_books_read(index, True)
    elif command == "pokaż przeczytane":
        bot.print_all_read_books()
    elif command == "pokaz ocenione"
        min_rating = float(input('Min ocena: '))
        max_rating = float(input('Max ocena: '))
        bot.print_all_read_books(min_rating, max_rating)
    else:
        print("Nie wiem o co chodzi, spróbuj jeszcze raz:")


